<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gps">

	<!-- 경로당 목록 -->
	<!-- <select id="list" resultType="cloud.gps.GpsVO"> select s.KEY, s.SENIOR_NAME, 
		s.SENIOR_ROADADDRESS, s.SENIOR_NUMADDRESS, s.SENIOR_CALL, s.SENIOR_LATITUDE, 
		s.SENIOR_LONGITUDE, s.SIDO, s.SIGUNGU , l.SENIOR_LIKE_NUM from SENIOR s left 
		join SENIOR_LIKE l on s.key = l.key where s.key between 6910 and 6950 order 
		by key </select> -->

	<!-- SELECT CASE WHEN DISTANCE &lt; 1 THEN RTRIM(TO_CHAR(DISTANCE*1000 , 
		'FM9990D99'),'.')||'m' ELSE DISTANCE||'km' END distance,T.* , S.* , (SELECT 
		COUNT(*) FROM SENIOR_BMARK B WHERE B.KEY = S.KEY ) SENIOR_LIKE_NUM from ( 
		SELECT ROWNUM no, C.DISTANCE , S.KEY FROM SENIOR S LEFT OUTER JOIN (SELECT 
		KEY , DISTNACE_WGS84(#{senior_latitude}, #{senior_longitude}, SENIOR_LATITUDE, 
		SENIOR_LONGITUDE) AS DISTANCE FROM SENIOR S ) C ON S.KEY=C.KEY WHERE S.SENIOR_ROADADDRESS 
		LIKE '%광주%' ORDER BY C.DISTANCE ASC ) T INNER JOIN SENIOR S ON T.KEY = S.KEY 
		WHERE T.NO &lt; 20 -->

	<select id="list" resultType="cloud.gps.GpsVO">
	  <![CDATA[
		SELECT ROWNUM no, CASE WHEN DISTANCE < 1 THEN
		 ]]>
		RTRIM(TO_CHAR(DISTANCE*1000 , 'FM9990D99'),'.')||'m' ELSE
		DISTANCE||'km' END distance,T.*
		, S.* , (SELECT SENIOR_LIKE_NUM FROM
		SENIOR_LIKE B WHERE B.KEY = S.KEY )
		SENIOR_LIKE_NUM
		from
		(
		SELECT ROWNUM
		no ,
		C.DISTANCE , S.KEY , S.SENIOR_ROADADDRESS
		FROM SENIOR S LEFT OUTER
		JOIN
		(SELECT KEY , DISTNACE_WGS84(#{senior_latitude},
		#{senior_longitude},
		SENIOR_LATITUDE, SENIOR_LONGITUDE) AS DISTANCE
		FROM SENIOR S
		) C ON
		S.KEY=C.KEY
		ORDER BY C.DISTANCE ASC
		) T INNER JOIN
		SENIOR S ON T.KEY = S.KEY
 		<![CDATA[
		 WHERE ROWNUM < #{zoom_level}
			 ]]>

	</select>

	<!-- 경로당 상세정보 조회 -->
	<select id="detail" resultType="cloud.gps.GpsVO">
		select s.*, l.senior_like_num
		from senior s, senior_like l
		where s.key = l.key and s.key=#{key}
	</select>

	<!-- 자주가는 경로당 목록 -->
	<select id="likelist" resultType="cloud.gps.GpsVO">
		select b.member_id, b.KEY,
		s.SENIOR_NAME, s.SENIOR_ROADADDRESS, s.SENIOR_LATITUDE,
		s.SENIOR_LONGITUDE, l.SENIOR_LIKE_NUM
		from senior_bmark b, senior s,
		SENIOR_LIKE l
		where b.key=s.key and s.key=l.key and
		b.member_id=#{member_id}
	</select>

	<!-- 좋아요 버튼 클릭시 insert + update 동시 진행 -->
	<insert id="likebtn">
		MERGE INTO SENIOR_LIKE L
		USING DUAL
		ON (L.KEY = #{key})
		WHEN MATCHED THEN
		UPDATE
		SET L.SENIOR_LIKE_NUM = L.SENIOR_LIKE_NUM + 1
		WHEN NOT MATCHED THEN
		INSERT (MEMBER_ID, KEY, SENIOR_LIKE_NUM)
		VALUES ('admin', #{key}, 1)
	</insert>

	<!-- 좋아요 버튼 선택시 자주가는 경로당 등록 -->
	<insert id="bmark">
		insert into SENIOR_BMARK (KEY, MEMBER_ID)
		values(#{key}, #{member_id})
	</insert>

	<!-- 좋아요 버튼 선택시 좋아요 리스트 컬럼 생성 -->
	<!-- 컬럼은 admin으로만 생성 -->
	<insert id="addlike">
		insert into SENIOR_LIKE (MEMBER_ID, KEY,
		SENIOR_LIKE_NUM)
		values ('admin', #{key}, 0)
	</insert>

	<!-- 좋아요 버튼 선택시 좋아요 카운트 증가 -->
	<update id="likecnt">
		UPDATE SENIOR_LIKE
		SET SENIOR_LIKE_NUM =
		SENIOR_LIKE_NUM + 1
		WHERE KEY = #{key}
	</update>

	<!-- 좋아요 취소시 자주가는 경로당 삭제 -->
	<delete id="delbmark">
		delete from SENIOR_BMARK
		where key = #{key} and
		member_id=#{member_id}
	</delete>

	<!-- 좋아요 취소시 좋아요 카운트 감소 -->
	<update id="unlikecnt">
		UPDATE SENIOR_LIKE
		SET SENIOR_LIKE_NUM =
		SENIOR_LIKE_NUM - 1
		WHERE KEY = #{key}
	</update>

	<!-- 이미 좋아요가 선택된 경우, 상세정보 페이지의 좋아요 버튼 활성화 조건 -->
	<select id="likeyet" resultType="String">
		select key
		from SENIOR_BMARK
		where key=#{key} and member_id=#{member_id}
	</select>

	<!-- 검색 결과 -->
	<!-- <select id="search" resultType="cloud.gps.GpsVO">
		SELECT s.KEY, s.SENIOR_NAME,
		s.SENIOR_ROADADDRESS, s.SENIOR_NUMADDRESS, s.SENIOR_CALL,
		s.SENIOR_LATITUDE, s.SENIOR_LONGITUDE, s.SIDO, s.SIGUNGU
		,
		l.SENIOR_LIKE_NUM
		FROM SENIOR s
		LEFT JOIN SENIOR_LIKE l
		ON s.key = l.key
		WHERE s.SENIOR_NAME LIKE '%'||#{keyword}||'%' OR s.SENIOR_ROADADDRESS
		LIKE '%'||#{keyword}||'%'
		ORDER BY s.KEY
	</select> -->
	
	<select id="search" resultType="cloud.gps.GpsVO">
		SELECT s.KEY, s.SENIOR_NAME,
		s.SENIOR_ROADADDRESS, s.SENIOR_NUMADDRESS, s.SENIOR_CALL,
		s.SENIOR_LATITUDE, s.SENIOR_LONGITUDE, s.SIDO, s.SIGUNGU
		,
		l.SENIOR_LIKE_NUM
		FROM SENIOR s
		LEFT JOIN SENIOR_LIKE l
		ON s.key = l.key
		WHERE s.SENIOR_NAME LIKE '%'||#{keyword}||'%'
		ORDER BY s.KEY
	</select>
	

	<select id="like_count" resultType="string">
		select senior_like_num from
		senior_like where key = #{key}
	</select>

	<insert id="location">
		insert into LOCATION (MEMBER_ID, LOCATION_LATITUDE,
		LOCATION_LONGITUDE,
		LOCATION_TIME)
		values (#{member_id},
		#{senior_latitude},
		#{senior_longitude}, sysdate)
	</insert>

	<update id="locationupdate">
		UPDATE LOCATION
		SET MEMBER_ID = #{member_id},
		LOCATION_LATITUDE=#{senior_latitude},
		LOCATION_LONGITUDE=#{senior_longitude},
		LOCATION_TIME=sysdate
		WHERE
		member_id=#{member_id}
	</update>

</mapper>